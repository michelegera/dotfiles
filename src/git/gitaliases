[alias]

    a   = add
    amd = commit --amend
    b   = branch
    c   = commit
    ca  = !git add -A && git commit
    co  = checkout
    cp  = cherry-pick
    d   = diff -- . ':!*package-lock.json' ':!*yarn.lock'
    dc  = diff --cached -- . ':!*package-lock.json' ':!*yarn.lock'
    f   = fetch
    fp  = push --force
    l   = log --branches --pretty=custom
    lc  = shortlog --email --numbered --summary
    p   = push
    r   = rebase
    rc  = rebase --continue
    st  = status
    sth = stash --include-untracked
    u   = commit --amend --no-edit
    up  = !git fetch && git rebase --autostash FETCH_HEAD

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Remove branches that have already been merged with master.

    dm = "!f() {\
        git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Switch to a branch, creating it if necessary.

    go = "!f() { \
        git switch -c \"$1\" 2> /dev/null || git switch \"$1\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Interactive rebase with the given number of latest commits.

    reb = "!f() { \
        git rebase -i HEAD~$1; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Remove the tag with the specified tag name if it exists and tag the latest
    # commit with that name.

    retag = "!f() { \
        git tag -d "$1" &> /dev/null; \
        git tag $1; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Remove last commits (by default it removes the last commit).

    rlc = "!f() { \
        declare n=\"${1:-1}\"; \
        git reset --hard \"HEAD~$n\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Undo last commits (by default it undoes the last commit).

    ulc = "!f() { \
        declare n=\"${1:-1}\"; \
        git reset --soft \"HEAD~$n\"; \
    }; f"
