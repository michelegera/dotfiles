[alias]
  a       = commit --amend
  b       = branch
  c       = commit
  ca      = !git add -A && git commit                                       # Commit all changes
  co      = checkout
  commend = commit --amend --no-edit
  cp      = cherry-pick
  d       = diff
  dc      = diff --cached
  dm      = !git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d # Remove branches that have already been merged with master
  fp      = push --force
  l       = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --branches
  lc      = shortlog --summary --numbered                                   # List contributors
  please  = push --force-with-lease
  rc      = rebase --continue
  rlc     = !git reset --hard HEAD~1                                        # Remove last commit
  st      = status
  sts     = status --short --branch
  stsh    = stash --keep-index
  staash  = stash --include-untracked
  staaash = stash --all
  ulc     = reset --soft HEAD~1                                             # Undo last commit
  up      = !git fetch && git rebase --autostash FETCH_HEAD

  # ----------------------------------------------------------------------------
  # Switch to a branch, creating it if necessary

  go = "!f() { \
    git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; \
  }; f"

  # ----------------------------------------------------------------------------
  # Interactive rebase with the given number of latest commits

  reb = "!f() { \
    git rebase -i HEAD~$1; \
  }; f"

  # ----------------------------------------------------------------------------
  # Undo (http://megakemp.com/2016/08/25/git-undo/)
  undo = "!f() { \
    git reset --hard $(git rev-parse --abbrev-ref HEAD)@{${1-1}}; \
  }; f"

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

[branch]
  autosetuprebase = always

[color]
  branch = auto
  diff = auto
  status = auto
  showbranch = auto
  ui = true

[color "branch"]
  current = green bold
  local = green
  remote = yellow

[color "diff"]
  meta = yellow bold
  frag = magenta bold                             # line info
  old = red                                       # deletions
  new = green                                     # additions

[color "status"]
  added = green reverse
  changed = yellow reverse
  untracked = red reverse

[core]
  attributesfile = ~/.gitattributes
  autocrlf = input
  editor = nvim
  excludesfile = ~/.gitignore

  # Prevent showing files whose names contain non-ASCII symbols as unversioned.
  # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
  precomposeunicode = false

  # Make `git rebase` safer on macOS
  # http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/
  trustctime = false

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space,cr-at-eol

[commit]
  gpgsign = true

[diff]
  # Enable an experimental heuristic that shifts the hunk boundary in an
  # attempt to make the resulting patch easier to read.
  indentHeuristic = true

  # Detect copies as well as renames
  renames = copies

[fetch]
  prune = true

[gpg]
  program = /usr/local/bin/gpg

[help]
  autocorrect = 30

[http]
  postBuffer = 134217728

[include]
  path = ~/.gitconfig.local

[pager]
  diff = diff-so-fancy | less --tabs=1,5 -RFX
  show = diff-so-fancy | less --tabs=1,5 -RFX

[pretty]
  custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
  #                     │        │            │            │             └─ author name
  #                     │        │            │            └─ message
  #                     │        │            └─ date (relative)
  #                     │        └─ decorations (branch, heads or tags)
  #                     └─ hash (abbreviated)

[pull]
  rebase = true

[push]
  # Make `git push` automatically push relevant
  # annotated tags when pushing branches out
  followTags = true

  # Make `git push` push only the current branch
  default = simple

[user]
  useconfigonly = true
