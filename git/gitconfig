[alias]

  a   = commit --amend
  b   = branch
  c   = commit
  ca  = !git add -A && git commit                 # Commit all changes
  co  = checkout
  cp  = cherry-pick
  d   = diff
  dc  = diff --cached
  fp  = push --force
  g   = log --graph --pretty=custom               # Show custom graph
  l   = log --pretty=custom                       # Show custom log
  lc  = shortlog --summary --numbered             # List contributors
  rc  = rebase --continue
  rlc = !git reset --hard HEAD~1                  # Remove last commit
  st  = status
  ulc = reset --soft HEAD~1                       # Undo last commit

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  # Shows the most recent changes for each branch

  changes = "!f() { \
    git for-each-ref --sort='-authordate:iso8601' --format=' %(authordate:relative)%09%(refname:short)' refs/remotes/origin; \
  }; f"

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  # Credit an author on the latest commit

  credit = "!f() { \
    if [ -n \"$1\" ] && [ -n \"$2\" ]; then \
      git commit --amend --author \"$1 <$2>\" -C HEAD; \
    fi \
  }; f"

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  # Switch to a branch, creating it if necessary

  go = "!f() { \
    git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; \
  }; f"

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  # Merge GitHub pull request on top of the `master` branch

  mpr = "!f() { \
    if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
      git fetch origin refs/pull/$1/head:pr/$1 && \
      git rebase master pr/$1 && \
      git checkout master && \
      git merge pr/$1 && \
      git branch -D pr/$1 && \
      git commit --amend -m \"$(git log -1 --pretty=%B)\n\nClose #$1\"; \
    fi \
  }; f"

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  # Interactive rebase with the given number of latest commits

  reb = "!f() { \
    git rebase -i HEAD~$1; \
  }; f"

[color "branch"]

  current = green bold
  local = green
  remote = yellow

[color "diff"]

  meta = yellow bold
  frag = magenta bold                             # line info
  old = red                                       # deletions
  new = green                                     # additions

[color "status"]

  added = green reverse
  changed = yellow reverse
  untracked = red reverse

[core]

  attributesfile = ~/.gitattributes
  autocrlf = input
  editor = vim
  excludesfile = ~/.gitignore

[pretty]

  custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
  #                     │        │            │            │             └─ author name
  #                     │        │            │            └─ message
  #                     │        │            └─ date (relative)
  #                     │        └─ decorations (branch, heads or tags)
  #                     └─ hash (abbreviated)

[push]

  # Make `git push` automatically push relevant
  # annotated tags when pushing branches out

  followTags = true

  # Make `git push` push only the current branch
  default = simple

[include]

  path = ~/.gitconfig.local

[git-up "bundler"]

  check = true

[git-up "fetch"]

  prune = true

[pager]

	diff = diff-so-fancy | less --tabs=1,5 -RFX
	show = diff-so-fancy | less --tabs=1,5 -RFX

[user]
	useconfigonly = true
